#!/bin/bash
# A central place to put all the important paths. You probably have to modify this to make things work.

#The following modules and env variables are needed on MN5:
#module purge
#module load gcc/12.3.0            
#module load openmpi/4.1.5-gcc     
#module load libxc/6.2.0-gcc-kxc   
#module load hdf5/1.14.1-2-gcc-openmpi                                                          
#module load pnetcdf/1.12.3-gcc-openmpi                                                         
#module load netcdf/c-4.9.2_fortran-4.6.1_cxx4-4.3.1_hdf5-1.14.1-2_pnetcdf-1.12.3-gcc-openmpi   
#module load mkl/2024.2
#module load lapack/3.12-gcc
#module load scalapack/2.2.0-gcc-openmpi
#module load fftw/3.3.10-gcc-ompi
#CC=mpicc
#CXX=mpicxx


# the fortran compiler
FORTRAN_COMPILER="mpifort"
# required compiler flags
FCFLAGS="-ffree-line-length-none -std=f2008 -cpp"
# extra flags, for debugging and such
FCFLAGS_EXTRA=""
#FCFLAGS_EXTRA="-fbacktrace -fcheck=all -finit-real=nan -finit-derived -fmax-errors=10 --pedantic -Wall -Wextra -pedantic -Wcast-align -Wdisabled-optimization -Wmissing-include-dirs -Wshadow -Wunused -fdiagnostics-show-option -fcheck=all -Wstrict-overflow=0 -Wrealloc-lhs"

# optimization stuff. Go all in, sometimes
OPTIMIZATION_LEVEL="-O3"
#OPTIMIZATION_SENSITIVE="-O0"

# the flag that sets the default real to a double.
DOUBLE_FLAG="-fdefault-real-8"
# The flag that tells the compiler where to put .o and .mod files.
MODULE_FLAG="-J"

# the header to put in python scripts.
PYTHONHEADER="#!/usr/bin/python"

# Which gnuplot terminal to use by default.
GNUPLOTTERMINAL="x11"  # nice on OSX, needs aquaterm installed and gnuplot compiled with support for it.

# Precompiler flags. Selecting default gnuplot terminal, and make the progressbars work.
PRECOMPILER_FLAGS="-DGP${GNUPLOTTERMINAL} -Dgfortranprogressbar"

# These are the BLAS/LAPACK libraries. On OSX with gfortran, use the built-in 'framework accelerate'
PATH_TO_BLASLAPACK_LIB="-L/gpfs/apps/MN5/GPP/LAPACK/3.12/GCC/lib64"
PATH_TO_BLASLAPACK_INC="-I/gpfs/apps/MN5/GPP/LAPACK/3.12/GCC/include"
BLASLAPACK_LIBS="-llapack -lblas"

# I use fftw for Fourier transforms.
PATH_TO_FFTW_LIB="-L/gpfs/apps/MN5/GPP/FFTW/3.3.10/GCC/OPENMPI/lib"
PATH_TO_FFTW_INC="-I/gpfs/apps/MN5/GPP/FFTW/3.3.10/GCC/OPENMPI/include"
#FFTW_LIBS="-lfftw3f_mpi -lfftw3f_threads -lfftw3f -lfftw3_mpi -lfftw3_threads -lfftw3"
FFTW_LIBS="-lfftw3"

# Also need MPI
PATH_TO_MPI_LIB="-L/gpfs/apps/MN5/GPP/OPENMPI/4.1.5/GCC/lib"
PATH_TO_MPI_INC="-I/gpfs/apps/MN5/GPP/OPENMPI/4.1.5/GCC/include"
MPI_LIBS="-lmpi_mpifh -lmpi"

# I also use HDF5 every now and then
PATH_TO_HDF5_LIB="-L/gpfs/apps/MN5/GPP/HDF5/1.14.1-2/GCC/OPENMPI/lib"
PATH_TO_HDF5_INC="-I/gpfs/apps/MN5/GPP/HDF5/1.14.1-2/GCC/OPENMPI/include"
HDF5_LIBS="-lhdf5 -lhdf5_fortran"
#HDF5_LIBS="-lhdf5_hl_parallel -lhdf5_parallel -lhdf5hl_fortran_parallel -lhdf5_fortran_parallel"

# We also need a C-compiler
C_COMPILER="mpicc"
C_FLAGS=""

# CGAL is written in c++. I have wrapper functions in C, that I call from Fortran.
#CPP_COMPILER="mpicxx"
#CPP_FLAGS="--std=c++0x -frounding-math -O3"

# Things below this line is strictly optional, and not really needed except for testing purposes.
# If you want to try and use CGAL. Not recommended for people who do not like to sort out compiler errors.
USECGAL="no"
USEAIMS="no"
